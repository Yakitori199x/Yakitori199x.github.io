{"pages":[],"posts":[{"title":"Hello World","text":"Welcome to Hexo! This is your very first post. Check documentation for more info. If you get any problems when using Hexo, you can find the answer in troubleshooting or you can ask me on GitHub. Quick StartCreate a new post1$ hexo new &quot;My New Post&quot; More info: Writing Run server1$ hexo server More info: Server Generate static files1$ hexo generate More info: Generating Deploy to remote sites1$ hexo deploy More info: Deployment","link":"/2021/01/03/hello-world/"},{"title":"Chapter 6. Collecting data with streams","text":"Chapter 6. Collecting data with streams1. Joining Strings (6.2.3)The collector returned by the joining factory method concatenates into a single string all stringsresulting from invoking the toString method on each object in the stream. 1String shortMenu = menu.stream().map(Dish::getName).collect(joining()); Note that joining internally makes use of a StringBuilder to append the generated strings intoone. It also has an overloaded version that accepts a delimiter string between two consecutive elements. 123String shortMenu = menu.stream().map(Dish::getName).collect(joining(&quot;, &quot;));// Result:// pork, beef, chicken, french fries, rice, season fruit, pizza, prawns, salmon 2. Collect vs. reduce123456789Stream&lt;Integer&gt; stream = Arrays.asList(1, 2, 3, 4, 5, 6).stream();List&lt;Integer&gt; numbers = stream.reduce( new ArrayList&lt;Integer&gt;(), (List&lt;Integer&gt; l, Integer e) -&gt; { l.add(e); return l; }, (List&lt;Integer&gt; l1, List&lt;Integer&gt; l2) -&gt; { l1.addAll(l2); return l1; }); The semantic problem: reduce method is meant to combine two values and produce a new one; it’s an immutable reduction. In contrast, the collect method is designed to mutate a container to accumulate the result it’s supposed to produce. The practical problem: this reduction process can’t work in parallel because the concurrent modification of the same data structure operated by multiple threads can corrupt the List itself. 3. Multilevel grouping (6.3.1)You can achieve multilevel grouping by using a collector created with a two-argument version of the Collectors.groupingBy factory method, which **accepts a second argument of type collector **besides the usual classification function. 123456789101112131415161718192021public enum CaloricLevel { DIET, NORMAL, FAT };Map&lt;Dish.Type, Map&lt;CaloricLevel, List&lt;Dish&gt;&gt; dishesByTypeCaloricLevel = menu.stream().collect( // outer collector with classification function groupingBy(Dish::getType, // inner collector groupingBy(dish -&gt; { if (dish.getCalories() &lt;= 400) return CaloricLevel.DIET; else if (dish.getCalories() &lt;= 700) return CaloricLevel.NORMAL; else return CaloricLevel.FAT; }) ) )/* * Result will be like: * {MEAT={DIET=[chicken], NORMAL=[beef], FAT=[pork]}, * FISH={DIET=[prawns], NORMAL=[salmon]}, * OTHER={DIET=[rice, seasonal fruit], NORMAL=[french fries, pizza]}} */ The regular one-argument groupingBy(f), where f is the classification function, is in reality just shorthand for groupingBy(f, toList()). More generally, the second collector passed to the first groupingBy can be any type of collector, not just another groupingBy. 123456789101112131415// count the number of Dishes in the menu for each type// {MEAT=3, FISH=2, OTHER=4}Map&lt;Dish.Type, Long&gt; typesCount = menu.stream().collect( groupingBy(Dish::getType, counting()));// find the highest-calorie dish in the menu// {FISH=salmon, OTHER=pizza, MEAT=pork}// 因为maxBy返回的是Optional，此处需要用collectingAndThen将maxBy和Optional::get包起来// 其中，maxBy返回一个collector，Optional::get是transformation function，collectingAndThen也返回一个collector。Map&lt;Dish.Type, Dish&gt; mostCaloricType = menu.stream() .collect(groupingBy(Dish::getType, collectingAndThen( maxBy(comparingInt(Dish::getCalories)), Optional::get)));","link":"/2021/01/03/Chapter%206.%20Collecting%20data%20with%20streams/"}],"tags":[{"name":"Java","slug":"Java","link":"/tags/Java/"},{"name":"Stream","slug":"Stream","link":"/tags/Stream/"}],"categories":[{"name":"编程","slug":"编程","link":"/categories/%E7%BC%96%E7%A8%8B/"},{"name":"Java","slug":"编程/Java","link":"/categories/%E7%BC%96%E7%A8%8B/Java/"}]}